{{- define "orchestrator.container" }}
- name: {{ .root.Values.name | default "orchestrator" }}
  image: {{ .root.Values.image }}
  ports:
    - containerPort: 8090
  readinessProbe:
    httpGet:
      path: /health
      port: 8090
    initialDelaySeconds: 5
    periodSeconds: 10
  livenessProbe:
    httpGet:
      path: /health
      port: 8090
    initialDelaySeconds: 15
    periodSeconds: 20
  resources:
    requests:
      memory: "256Mi"
      cpu: "500m"
    limits:
      memory: "512Mi"
      cpu: "2000m"
  env:
    - name: URL
      value: {{ .root.Values.url }}
    - name: RPC_URL
      value: {{ .root.Values.env.RPC_URL }}
    - name: MODE
      value: {{ .mode }}
    {{- if not .root.Values.env.REDIS_URL }}
    - name: REDIS_STORE_URL
      value: "redis://{{ include "orchestrator.redisName" .root }}:6379"
    {{- else }}
    - name: REDIS_STORE_URL
      value: "{{ .root.Values.env.REDIS_URL }}"
    {{- end }}
    - name: DISCOVERY_URLS
      value: {{ .root.Values.env.DISCOVERY_URLS }}
    - name: COORDINATOR_KEY
      valueFrom:
        secretKeyRef:
          name: {{ include "orchestrator.secretName" .root }}
          key: coordinatorKey
    - name: ADMIN_API_KEY
      valueFrom:
        secretKeyRef:
          name: {{ include "orchestrator.secretName" .root }}
          key: adminApiKey
    - name: S3_CREDENTIALS
      valueFrom:
        secretKeyRef:
          name: {{ include "orchestrator.secretName" .root }}
          key: s3Credentials
    - name: COMPUTE_POOL_ID
      value: "{{ .root.Values.computePoolId }}"
    - name: DOMAIN_ID
      value: "{{ .root.Values.domainId }}"
    - name: DISCOVERY_REFRESH_INTERVAL
      value: "{{ .root.Values.env.DISCOVERY_REFRESH_INTERVAL }}"
    - name: BUCKET_NAME
      value: "{{ .root.Values.env.BUCKET_NAME }}"
    - name: LOG_LEVEL
      value: "{{ .root.Values.env.LOG_LEVEL }}"
    - name: HOURLY_S3_UPLOAD_LIMIT
      value: "{{ .root.Values.env.HOURLY_S3_UPLOAD_LIMIT }}"
    {{- if .root.Values.env.WEBHOOK_CONFIGS }}
    - name: WEBHOOK_CONFIGS
      value: {{ .root.Values.env.WEBHOOK_CONFIGS | quote }}
    {{- end }}
    {{- if .root.Values.env.NODE_GROUP_CONFIGS }}
    - name: NODE_GROUP_CONFIGS
      value: {{ .root.Values.env.NODE_GROUP_CONFIGS | quote }}
    {{- end }}
    {{- if .root.Values.env.MAX_HEALTHY_NODES_WITH_SAME_ENDPOINT }}
    - name: MAX_HEALTHY_NODES_WITH_SAME_ENDPOINT
      value: "{{ .root.Values.env.MAX_HEALTHY_NODES_WITH_SAME_ENDPOINT }}"
    {{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orchestrator.fullname" . }}-api
  namespace: {{ .Values.namespace }}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{ include "orchestrator.fullname" . }}-api
  template:
    metadata:
      labels:
        app: {{ include "orchestrator.fullname" . }}-api
    spec:
      containers:
        {{- include "orchestrator.container" (dict "root" . "mode" "api" "api" true) | nindent 8 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orchestrator.fullname" . }}-processor
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "orchestrator.fullname" . }}-processor
  template:
    metadata:
      labels:
        app: {{ include "orchestrator.fullname" . }}-processor
    spec:
      containers:
        {{- include "orchestrator.container" (dict "root" . "mode" "processor" "api" false) | nindent 8 }}
