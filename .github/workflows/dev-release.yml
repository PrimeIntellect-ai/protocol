name: Development Release

on:
  push:
    branches:
      - develop
    tags-ignore:
      - '*'

jobs:
  cleanup-old-releases:
    name: Cleanup Old Development Releases
    runs-on: ubuntu-latest
    steps:
      - name: Delete old development releases
        uses: dev-drprasad/delete-older-releases@v0.3.2
        with:
          keep_latest: 5
          delete_tags: true
          delete_tag_pattern: ^dev-
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    name: Build and Create Development Release
    needs: cleanup-old-releases
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: darwin-arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build all workspace members
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --workspace --target ${{ matrix.target }}

      - name: Prepare binaries
        run: |
          mkdir -p release-artifacts
          # Move and rename binaries with platform suffix
          if [ -f target/${{ matrix.target }}/release/miner ]; then
            cp target/${{ matrix.target }}/release/miner release-artifacts/miner-${{ matrix.suffix }}
          fi
          if [ -f target/${{ matrix.target }}/release/validator ]; then
            cp target/${{ matrix.target }}/release/validator release-artifacts/validator-${{ matrix.suffix }}
          fi
          if [ -f target/${{ matrix.target }}/release/orchestrator ]; then
            cp target/${{ matrix.target }}/release/orchestrator release-artifacts/orchestrator-${{ matrix.suffix }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.suffix }}
          path: release-artifacts/*
          retention-days: 1

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts

      - name: Generate release tag
        id: tag
        run: |
          echo "tag_name=dev-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Development Build ${{ steps.tag.outputs.tag_name }}
          body: |
            ⚠️ Development Build (Not for Production Use)
            
            Branch: develop
            Commit: ${{ github.sha }}
            Build Date: ${{ steps.tag.outputs.tag_name }}
            
            Builds included:
            - Linux AMD64 (x86_64)
            - Linux ARM64 (aarch64)
            - macOS ARM64 (M1/M2/M3)
            
            Components:
            - Miner
            - Validator
            - Orchestrator
            
            Note: This is an automated development build. For stable releases, please use builds from the master branch.
          files: all-artifacts/**/*
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}